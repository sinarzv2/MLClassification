// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace PredictDisease_WebApi1
{
    public partial class PredictDisease
    {
        /// <summary>
        /// model input class for PredictDisease.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"pelvic_incidence")]
            public float Pelvic_incidence { get; set; }

            [ColumnName(@"pelvic_tilt")]
            public float Pelvic_tilt { get; set; }

            [ColumnName(@"lumbar_lordosis_angle")]
            public float Lumbar_lordosis_angle { get; set; }

            [ColumnName(@"sacral_slope")]
            public float Sacral_slope { get; set; }

            [ColumnName(@"pelvic_radius")]
            public float Pelvic_radius { get; set; }

            [ColumnName(@"degree_spondylolisthesis")]
            public float Degree_spondylolisthesis { get; set; }

            [ColumnName(@"class")]
            public string Class { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for PredictDisease.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public string Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("PredictDisease.zip");

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            ModelOutput result = predEngine.Predict(input);
            return result;
        }
    }
}
